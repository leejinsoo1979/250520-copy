import React, { useState, useEffect, useCallback, useRef } from "react";
import { Switch } from "./ui/switch";
import { View, Box, Ruler, Settings } from "lucide-react";
import RoomViewer3D from "../common/RoomViewer3D";
import { useEditor } from "@context/EditorContext";
import useWindowSize from '../../hooks/useWindowSize';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faRulerHorizontal, faRulerVertical } from '@fortawesome/free-solid-svg-icons';
import CONSTANTS from '../../constants';
import HorizontalCabinets from '../cabinet/HorizontalCabinets';
import SizeUtils from '../../utils/sizeUtils';
import { convertTo2DModules } from '../../utils/moduleConverter';
import DropSlot from '../dnd/DropSlot';

// cn utility 함수 추가
const cn = (...classes) => {
  return classes.filter(Boolean).join(' ');
};

// 슬롯 영역 컴포넌트
const SlotArea = ({ slots }) => {
  return (
    <div className="absolute top-0 left-0 w-full h-full flex items-center justify-center">
      <div className="bg-white p-4 rounded-lg shadow-xl" style={{ width: '90%', height: '90%' }}>
        <h3 className="text-lg font-medium mb-4">슬롯 배치</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 h-[calc(100%-3rem)] overflow-auto">
          {slots.map((slot) => (
            <div key={slot.id} className="h-80 border border-gray-200 rounded-md">
              <DropSlot
                id={slot.id}
                width={slot.width}
                height={slot.height}
                depth={slot.depth}
              />
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export const EditorView = ({
  viewMode,
  setViewMode,
  isToggle1On = true,
  setIsToggle1On,
  isToggle2On = false,
  setIsToggle2On,
  designData,
  dimensions,
  spaceType,
  wallPosition = "left",
  frameColor = "#F8F8F8",
  modulesGap,
  handleModuleGapChange,
  showSlots = true, // 슬롯 표시 여부 prop 추가
}) => {
  // 모든 필요한 값과 함수를 EditorContext에서 가져오기
  const {
    cameraView, 
    setCameraView,
    viewMode: editorViewMode,
    setViewMode: setEditorViewMode,
    showGrid: editorShowGrid,
    setShowGrid: setEditorShowGrid,
    showShadows: editorShowShadows,
    setShowShadows: setEditorShowShadows,
    doorCount,
    setDoorCount,
    frameProperties,
    updateFrameProperty,
    updateViewers,
    viewer3DRef
  } = useEditor();

  const viewContainerRef = useRef(null);
  const windowSize = useWindowSize();
  const [editorSize, setEditorSize] = useState({ width: 0, height: 0 });
  const [editorWrapperSize, setEditorWrapperSize] = useState({
    width: 0,
    height: 0,
  });
  
  // 로컬 상태 초기화
  const [activeDirection, setActiveDirection] = useState(cameraView || "Front");
  const [showShadows, setShowShadows] = useState(true);
  const [showGrid, setShowGrid] = useState(true);
  const [showFrame, setShowFrame] = useState(true);
  const [showModuleSlots, setShowModuleSlots] = useState(true);
  
  // 단내림 설정 상태 저장용 ref
  const airConditionerStateRef = React.useRef({
    hasAirConditioner: frameProperties?.hasAirConditioner || 'no',
    acUnit: frameProperties?.acUnit || null
  });

  // 샘플 슬롯 데이터
  const [slots, setSlots] = useState([
    { 
      id: 'slot-1', 
      width: 600, 
      height: 720, 
      depth: 600,
      position: { x: 0, y: 0 }
    },
    { 
      id: 'slot-2', 
      width: 600, 
      height: 720, 
      depth: 600,
      position: { x: 0, y: 720 }
    },
    { 
      id: 'slot-3', 
      width: 600, 
      height: 600, 
      depth: 600,
      position: { x: 0, y: 1440 }
    }
  ]);

  // 에디터 뷰 컨테이너 사이즈 계산
  useEffect(() => {
    if (!viewContainerRef.current) return;

    const rect = viewContainerRef.current.getBoundingClientRect();
    setEditorWrapperSize({
      width: rect.width,
      height: rect.height,
    });

    const wrapperHeight = rect.height;
    const wrapperWidth = rect.width;

    // Fit frame to wrapper size
    let tempWidth = SizeUtils.mmToPx(modulesGap?.width || 2400, CONSTANTS.scale);
    let tempHeight = SizeUtils.mmToPx(modulesGap?.height || 2400, CONSTANTS.scale);
    const padding = 100; // px

    // If frame is larger than wrapper, scale it down
    if (tempWidth > wrapperWidth - padding || tempHeight > wrapperHeight - padding) {
      const wrapperRatio = (wrapperWidth - padding) / (wrapperHeight - padding);
      const frameRatio = tempWidth / tempHeight;

      if (frameRatio > wrapperRatio) {
        // Width constrained
        tempWidth = wrapperWidth - padding;
        tempHeight = tempWidth / frameRatio;
      } else {
        // Height constrained
        tempHeight = wrapperHeight - padding;
        tempWidth = tempHeight * frameRatio;
      }
    }

    setEditorSize({
      width: tempWidth,
      height: tempHeight,
    });
  }, [windowSize, viewContainerRef, modulesGap?.width, modulesGap?.height, CONSTANTS.scale]);

  // modulesGap 변경을 감지하여 콘솔에 로그 추가 - 강화된 버전
  useEffect(() => {
    if (modulesGap?.hasAirConditioner !== undefined || modulesGap?.acUnit) {
      console.log('[EditorView] modulesGap 변경 감지(강화된 버전):', {
        hasAirConditioner: modulesGap.hasAirConditioner,
        position: modulesGap.acUnit?.position,
        locked: modulesGap.acUnit?._positionLocked,
        userAction: modulesGap.acUnit?._userAction,
        hardOverride: modulesGap.acUnit?._hardOverride
      });
      
      // 단내림 위치 변경 감지 및 특별 처리 - 강화된 버전
      if (modulesGap.acUnit && airConditionerStateRef.current?.acUnit) {
        const prevPosition = airConditionerStateRef.current.acUnit.position;
        const newPosition = modulesGap.acUnit.position;
        
        // 상태 플래그 확인 - 확장된 플래그 체크
        const wasLocked = airConditionerStateRef.current.acUnit._positionLocked === true;
        const wasUserAction = airConditionerStateRef.current.acUnit._userAction === true;
        const wasHardOverride = airConditionerStateRef.current.acUnit._hardOverride === true;
        
        const isLocked = modulesGap.acUnit._positionLocked === true;
        const isUserAction = modulesGap.acUnit._userAction === true;
        const isHardOverride = modulesGap.acUnit._hardOverride === true;
        const isForceUpdate = modulesGap.acUnit._forceUpdate === true;
        
        // 사용자 액션이 있는 경우 우선권을 가짐
        const incomingHasPriority = isUserAction || isHardOverride || isForceUpdate;
        const existingHasPriority = wasUserAction || wasHardOverride;
        
        console.log('[EditorView] 위치 변경 우선순위 분석:', {
          prevPosition, 
          newPosition,
          incomingHasPriority,
          existingHasPriority,
          isUserAction,
          isHardOverride,
          isForceUpdate
        });
        
        // 1. 위치가 다르고 들어오는 데이터가 우선권을 가지거나, 기존 데이터가 우선권이 없는 경우
        if (prevPosition !== newPosition && (incomingHasPriority || !existingHasPriority)) {
          console.log('[EditorView] 단내림 위치 변경 감지(우선 수용):', prevPosition, '->', newPosition);
          
          // 강화된 메타데이터와 함께 단내림 상태 업데이트
          airConditionerStateRef.current = {
            hasAirConditioner: modulesGap.hasAirConditioner,
            acUnit: { 
              ...modulesGap.acUnit,
              timestamp: Date.now(),
              _positionLocked: true,
              _sourceUpdate: 'modulesGap',
              _acceptedAt: new Date().toISOString(),
              position: modulesGap.acUnit.position,
              _isUserAction: true,
              _hardOverride: true
            }
          };
          
          // 뷰어 강제 업데이트 - 여러 번 반복하여 확실히 적용
          if (updateViewers) {
            console.log('[EditorView] 단내림 위치 변경으로 뷰어 강제 업데이트(여러 번)');
            
            // 즉시 업데이트
            updateViewers();
            
            // 여러 시간 간격으로 업데이트 반복
            [20, 100, 300, 600].forEach(delay => {
              setTimeout(() => {
                console.log(`[EditorView] 단내림 위치 변경 상태 확인 (${delay}ms)`);
                updateViewers();
              }, delay);
            });
          }
        }
        // 2. 위치가 다르지만 기존 데이터가 우선권을 가지는 경우 - 무시
        else if (prevPosition !== newPosition && existingHasPriority && !incomingHasPriority) {
          console.log('[EditorView] 단내림 위치 변경 시도 감지(무시됨):', newPosition, 
            '(기존 사용자 선택 유지:', prevPosition, ')');
          
          // 뷰어 업데이트는 하지만 위치는 변경하지 않음
          if (updateViewers) {
            updateViewers();
          }
        }
        // 3. 위치는 같지만 메타데이터가 변경된 경우
        else if (prevPosition === newPosition) {
          // 메타데이터만 업데이트 (위치는 변경 없음)
          airConditionerStateRef.current.acUnit = {
            ...airConditionerStateRef.current.acUnit,
            _positionLocked: isLocked || wasLocked, // 둘 중 하나라도 잠겼으면 잠금 유지
            _userAction: isUserAction || wasUserAction,
            _lastUpdate: new Date().toISOString()
          };
          
          console.log('[EditorView] 단내림 메타데이터 업데이트 (위치 변경 없음)');
        }
      }
    }
  }, [modulesGap?.hasAirConditioner, modulesGap?.acUnit?.position, modulesGap?.acUnit?._positionLocked, updateViewers]);

  // frameProperties 변경 감지 및 저장
  useEffect(() => {
    if (frameProperties?.hasAirConditioner) {
      airConditionerStateRef.current = {
        hasAirConditioner: frameProperties.hasAirConditioner,
        acUnit: frameProperties.acUnit ? { ...frameProperties.acUnit } : null
      };
      console.log('[EditorView] 단내림 설정 저장:', airConditionerStateRef.current);
    }
  }, [frameProperties?.hasAirConditioner, frameProperties?.acUnit]);
  
  // slotStatuses는 doorCount에 따라 생성
  const [slotStatuses, setSlotStatuses] = useState(Array(doorCount).fill('empty'));
  const [hoveredSlot, setHoveredSlot] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [showDimensionType, setShowDimensionType] = useState("both"); // 치수 표시 타입: "both", "dimensions", "guides"
  
  // EditorContext의 cameraView가 변경될 때 activeDirection 업데이트
  useEffect(() => {
    if (cameraView && cameraView !== activeDirection) {
      setActiveDirection(cameraView);
    }
  }, [cameraView]);

  // doorCount가 변경될 때 slotStatuses 업데이트
  useEffect(() => {
    console.log('[EditorView] doorCount 변경됨:', doorCount);
    // doorCount가 변경되면 상태 초기화
    setSlotStatuses(Array(doorCount).fill('empty'));
    
    // modulesGap 업데이트 - doorCount가 변경되면 handleModuleGapChange 호출
    if (modulesGap?.doorCount !== doorCount) {
      console.log('[EditorView] modulesGap doorCount 동기화:', doorCount);
      handleModuleGapChange('doorCount', doorCount);
    }
  }, [doorCount, handleModuleGapChange]);
  
  // 기본 치수 정보
  const defaultDimensions = {
    width: dimensions?.width || 2400,
    height: dimensions?.height || 2400,
    depth: dimensions?.depth || 600
  };

  // 실제 프레임 크기를 3D 뷰어로부터 받을 때 상위 컴포넌트로 전달
  const handleFrameSizeUpdate = useCallback((frameSizes) => {
    console.log('실제 프레임 크기 업데이트:', frameSizes);
    
    // 상위 컴포넌트로 실제 프레임 크기 전달
    if (handleModuleGapChange) {
      // 각 프레임 속성 업데이트
      handleModuleGapChange('left', frameSizes.left);
      handleModuleGapChange('right', frameSizes.right);
      handleModuleGapChange('top', frameSizes.top);
      handleModuleGapChange('bottom', frameSizes.bottom);
      
      // 엔드패널 정보도 필요하면 추가
      if (frameSizes.endPanelLeft) {
        handleModuleGapChange('endPanelLeft', frameSizes.endPanelLeft);
      }
      if (frameSizes.endPanelRight) {
        handleModuleGapChange('endPanelRight', frameSizes.endPanelRight);
      }
    }
  }, [handleModuleGapChange]);

  // 치수 표시 handler
  const handleToggleGrid = (checked) => {
    setIsToggle1On(checked);
    setShowGrid(checked);
  };

  // 그림자 표시 handler
  const handleToggleShadows = (checked) => {
    setIsToggle2On(checked);
    setShowShadows(checked);
  };

  // view mode handler
  const handleViewModeChange = (mode) => {
    if (setViewMode) {
      setViewMode(mode);
    }
    
    // EditorContext의 viewMode도 함께 업데이트
    if (setEditorViewMode) {
      setEditorViewMode(mode);
    }
    
    // 뷰어 업데이트
    setTimeout(() => {
      if (updateViewers) {
        updateViewers();
      }
    }, 50);
  };

  // 방향 변경 핸들러 수정 - 단내림 설정 복원 로직 제거
  const handleDirectionChange = (direction) => {
    console.log('[EditorView] 방향 변경 시작:', { 
      현재방향: activeDirection, 
      새방향: direction
    });
    
    // 로컬 상태 업데이트
    setActiveDirection(direction);
    
    // EditorContext의 cameraView 업데이트
    if (setCameraView) {
      setCameraView(direction);
      
      // 뷰어 업데이트
      setTimeout(() => {
        if (updateViewers) {
          updateViewers();
        }
      }, 50);
    } else {
      // 뷰어 업데이트
      setTimeout(() => {
        if (updateViewers) {
          updateViewers();
        }
      }, 50);
    }
  };

  // 뷰 타입 계산
  const getViewType = () => {
    switch (activeDirection) {
      case "Front": return "front";
      case "Top": return "top";
      case "Left": return "left";
      case "Right": return "right";
      default: return "front";
    }
  };

  // 3D 렌더링 옵션
  const viewerOptions = {
    dimensions: defaultDimensions,
    showGrid: showGrid,
    showShadows: showShadows,
    showFrame: true,
    frameColor: frameColor,
    frameThickness: 50,
  };

  // 슬롯 호버 핸들러
  const handleSlotHover = (slotIndex, isHovering) => {
    if (isHovering) {
      setHoveredSlot(slotIndex);
      const newStatuses = [...slotStatuses];
      if (newStatuses[slotIndex] === 'empty') {
        newStatuses[slotIndex] = 'hover';
        setSlotStatuses(newStatuses);
      }
    } else {
      setHoveredSlot(null);
      const newStatuses = [...slotStatuses];
      if (newStatuses[slotIndex] === 'hover') {
        newStatuses[slotIndex] = 'empty';
        setSlotStatuses(newStatuses);
      }
    }
  };
  
  // 슬롯 클릭 핸들러
  const handleSlotClick = (slotIndex) => {
    setSelectedSlot(slotIndex);
    const newStatuses = [...slotStatuses];
    
    // 이전에 선택된 슬롯이 있으면 상태 초기화
    if (selectedSlot !== null && selectedSlot !== slotIndex) {
      newStatuses[selectedSlot] = 'empty';
    }
    
    // 새 슬롯 선택
    newStatuses[slotIndex] = newStatuses[slotIndex] === 'selected' ? 'empty' : 'selected';
    setSlotStatuses(newStatuses);
  };
  
  // 프레임 데이터 계산 함수
  const getFrameData = () => {
    const frameData = {
      enabled: true,
      color: frameColor,
      thickness: 20
    };

    // modulesGap이 있으면 해당 값 사용, 없으면 기본값 사용
    if (modulesGap) {
      // 각 프레임의 width 값 추출
      if (modulesGap.left && typeof modulesGap.left === 'object') {
        frameData.leftWidth = modulesGap.left.width || 50;
      } else {
        frameData.leftWidth = 50;
      }

      if (modulesGap.right && typeof modulesGap.right === 'object') {
        frameData.rightWidth = modulesGap.right.width || 50;
      } else {
        frameData.rightWidth = 50;
      }

      if (modulesGap.top && typeof modulesGap.top === 'object') {
        frameData.topWidth = modulesGap.top.width || 50;
      } else {
        frameData.topWidth = 50;
      }

      if (modulesGap.bottom && typeof modulesGap.bottom === 'object') {
        frameData.bottomHeight = modulesGap.bottom.height || 80;
      } else {
        frameData.bottomHeight = 80;
      }
    } else {
      // 기본값 설정
      frameData.leftWidth = 50;
      frameData.rightWidth = 50;
      frameData.topWidth = 50;
      frameData.bottomHeight = 80;
    }

    console.log('Frame data calculated:', frameData);
    return frameData;
  };

  // 치수 타입 변경 핸들러
  const handleDimensionTypeChange = (type) => {
    console.log('[EditorView] 치수 타입 변경:', type);
    setShowDimensionType(type);
  };

  // modulesGap에서 단내림 위치 변경 감지 및 강제 렌더링 처리
  useEffect(() => {
    if (modulesGap?.acUnit?.position) {
      console.log(`[EditorView] 단내림 위치 변경 감지: ${modulesGap.acUnit.position}`);
      
      // 현재 뷰어 업데이트를 위한 로직 - 필요한 경우 구현
      if (updateViewers) {
        updateViewers();
      }
    }
  }, [modulesGap?.acUnit?.position]);
  
  // 단내림 상태 변경 감지
  useEffect(() => {
    if (modulesGap?.hasAirConditioner !== undefined) {
      console.log(`[EditorView] 단내림 상태 변경 감지: ${modulesGap.hasAirConditioner ? '있음' : '없음'}`);
      
      // 뷰어 업데이트
      if (updateViewers) {
        updateViewers();
      }
    }
  }, [modulesGap?.hasAirConditioner]);

  return (
    <div className="editor-view flex-1 flex items-center justify-center bg-gray-100 overflow-auto" ref={viewContainerRef}>
      <div 
        className="relative bg-white shadow-lg"
        style={{
          width: editorSize.width,
          height: editorSize.height,
        }}
      >
        {/* 기존 애플리케이션 배치 */}
        <div className="w-full h-full relative">
          <div className="absolute inset-0 bg-white">
            <HorizontalCabinets
              frame={designData}
              frameSize={modulesGap}
              frameColor={frameColor}
              framePropertiesMetaData={frameProperties}
              modules={convertTo2DModules(designData)}
              handleTop={handleModuleGapChange}
              handleBottom={handleModuleGapChange}
              handleLeft={handleModuleGapChange}
              handleRight={handleModuleGapChange}
              handleHorizontalDivider={handleModuleGapChange}
              handleVerticalDivider={handleModuleGapChange}
              handleAddColumn={handleModuleGapChange}
              handleAddRow={handleModuleGapChange}
              handleSelectModule={handleModuleGapChange}
              highlightedModuleId={hoveredSlot}
              setHighlightedModuleId={setHoveredSlot}
              selectedModule={selectedSlot}
              modulesGap={modulesGap}
              doorModule={designData}
              doorOpenSide={wallPosition}
              handleDoorOpenSideChange={handleDirectionChange}
              currentAngleView={activeDirection}
              setCurrentAngleView={setActiveDirection}
              onModuleSelect={handleModuleGapChange}
              handleModulesGapChange={handleModuleGapChange}
              handleFrameSizeChange={handleFrameSizeUpdate}
              scale={CONSTANTS.scale}
            />
          </div>
          
          {/* 슬롯 영역 표시 (조건부) */}
          {showSlots && <SlotArea slots={slots} />}
        </div>
        
        {/* 가로 사이즈 표시 */}
        <div className="absolute -top-8 left-0 right-0 flex items-center justify-center">
          <div className="px-2 py-1 bg-gray-200 rounded-md text-xs flex items-center">
            <FontAwesomeIcon icon={faRulerHorizontal} className="mr-1" />
            <span>너비: {modulesGap?.width || 2400}mm</span>
          </div>
        </div>
        
        {/* 세로 사이즈 표시 */}
        <div className="absolute top-0 bottom-0 -left-8 flex items-center justify-center">
          <div className="px-2 py-1 bg-gray-200 rounded-md text-xs flex items-center transform -rotate-90">
            <FontAwesomeIcon icon={faRulerVertical} className="mr-1" />
            <span>높이: {modulesGap?.height || 2400}mm</span>
          </div>
        </div>
      </div>
    </div>
  );
};